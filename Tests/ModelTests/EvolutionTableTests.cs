using Core.Models;
using Core.Enums;
using Xunit;
using Core.Models.Interfaces;

namespace Tests.ModelTests
{
    public class EvolutionTableTests
    {
        [Fact]
        public void AccessorsReturnCorrectValues()
        {
            IEvolutionTable model = new EvolutionTable(new byte[]
            {
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x09, 0x0A, 0x0B,
                0x0D, 0x0F, 0x10, 0x12, 0x14, 0x15, 0x17, 0x18, 0x1A, 0x1B,
                0x1D, 0x1F, 0x20, 0x22, 0x23, 0x25, 0x26, 0x28, 0x29, 0x2B,
                0x2D, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3D,
                0x3F, 0x40, 0x42, 0x43, 0x45, 0x46, 0x48, 0x4A, 0x4C, 0x4D,
                0x4F, 0x50, 0x52, 0x53, 0x55, 0x56, 0x58, 0x5A, 0x5B, 0x5D,
                0x5E, 0x60, 0x62, 0x63, 0x65, 0x66, 0x68, 0x6A, 0x6B, 0x6D,
                0x6E, 0x70, 0x71, 0x73, 0x74, 0x76, 0x77, 0x79, 0x7A, 0x7C,
                0x7D, 0x7F, 0x80, 0x82, 0x83, 0x85, 0x86, 0x88, 0x8A, 0x8C,
                0x8E, 0x90, 0x91, 0x93, 0x95, 0x96, 0x98, 0x9A, 0x9C, 0x9E,
                0xA0, 0xA1, 0xA3, 0xA5, 0xA7, 0xA9, 0xAB, 0xAD, 0xAF, 0xB2,
                0xB5, 0xB7, 0xBC, 0x00, 0x00, 0x00
            });

            Assert.Equal(PokemonId.Vaporeon, model.GetEntry(0));
            Assert.Equal(PokemonId.Jolteon, model.GetEntry(1));
            Assert.Equal(PokemonId.Flareon, model.GetEntry(2));
        }

        [Fact]
        public void AccessorsSetCorrectValues()
        {
            IEvolutionTable model = new EvolutionTable();
            model.SetEntry(0, PokemonId.Fraxure);
            model.SetEntry(11, PokemonId.Ampharos);
            model.SetEntry(23, PokemonId.Arbok);

            byte[] expected = new byte[]
            {
                0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            };

            Assert.Equal(expected, model.Data);
        }
    }
}
