using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Xml.Linq;

namespace RanseiLink.Generation;

internal class Program
{
    static void Main(string[] args)
    {
        var doc = LoadResourceDoc("Models.xml");

        var models = doc.Element("Models")!.Elements("Model");

        Dictionary<string, string> idsWithModels = [];
        foreach (var modelElement in models)
        {
            if (modelElement.Elements().Any(x => x.Attribute("Name")?.Value == "Name"))
            {
                var name = modelElement.Attribute("Name")!.Value;
                var id = modelElement.Attribute("Id")?.Value ?? (name + "Id");
                idsWithModels[id] = name;
            }
        }
        idsWithModels["SpeakerId"] = "Speaker";
        idsWithModels["MoveRangeId"] = "MoveRange";
        idsWithModels["GimmickRangeId"] = "GimmickRange";
        idsWithModels["BattleConfigId"] = "BattleConfig";
        idsWithModels["GimmickObjectId"] = "GimmickObject";
        idsWithModels["MoveAnimationId"] = "MoveAnimation";

        foreach (var modelElement in models)
        {
            if (modelElement.Attribute("Model")?.Value == "true")
            {
                GenerateModel(modelElement);
            }

            if (modelElement.Attribute("ViewModel")?.Value == "true")
            {
                GenerateViewModel(modelElement, idsWithModels);
            }

            foreach (var serviceElement in modelElement.Elements("Service"))
            {
                GenerateService(modelElement, serviceElement);
            }

            if (modelElement.Attribute("Command")?.Value == "true")
            {
                GenerateCommand(modelElement);
            }
        }

        GenerateModServiceContainer(models);
        GenerateConsoleRenderer(models);

        PortColorsToXP();
    }

    private static string GetSlnFolder()
    {
        var sourceFilePath = GetSourceFilePathName();
        var slnFolder = Path.GetDirectoryName(Path.GetDirectoryName(sourceFilePath))!;
        return slnFolder;
    }

    private static XDocument LoadResourceDoc(string fileName)
    {
        var path = $"RanseiLink.Generation.{fileName}";
        XDocument doc;
        using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(path)!)
        {
            doc = XDocument.Load(stream);
        }
        return doc;
    }

    private static string GetSourceFilePathName([CallerFilePath] string? callerFilePath = null)
    {
        return callerFilePath ?? throw new Exception("Failed to get caller file path");
    }

    public class CultureParams
    {
        public CultureParams(XElement element, string attrName, Func<string, object[]> attrValueToParams)
        {
            var defaultAttr = element.Attribute(attrName) ?? throw new Exception($"Missing default attr of '{attrName}'");
            DefaultParams = attrValueToParams(defaultAttr.Value);

            var prefix = attrName + "_";
            foreach (var attr in element.Attributes())
            {
                if (attr.Name.LocalName.StartsWith(prefix))
                {
                    var culture = attr.Name.LocalName[prefix.Length..];
                    Cultures[culture] = attrValueToParams(attr.Value);
                }
            }
        }

        public object[] DefaultParams { get; }

        public Dictionary<string, object[]> Cultures { get; } = [];
    }

    public enum Accessor
    {
        Get,
        Set,
    }

    private static void GenerateCommand(XElement modelElement)
    {
        var name = modelElement.Attribute("Name")!.Value;
        var id = modelElement.Attribute("Id")?.Value ?? (name + "Id");

        var sb = new StringBuilder();
        sb.AppendLine("// This file is automatically generated");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using RanseiLink.Core.Enums;");
        sb.AppendLine("using RanseiLink.Core.Services.ModelServices;");
        sb.AppendLine();
        sb.AppendLine("namespace RanseiLink.Console.ModelCommands;");
        sb.AppendLine();
        sb.AppendLine($"[Command(\"{name.ToLowerInvariant()}\", Description = \"Get data on a given {name}.\")]");
        sb.AppendLine($"public class {name}Command(ICurrentModService currentModService) : ICommand");
        sb.AppendLine("{");
        sb.AppendLine($"    [CommandParameter(0, Description = \"{name} ID.\", Name = \"id\")]");
        sb.AppendLine($"    public {id} Id {{ get; set; }}");
        sb.AppendLine();
        sb.AppendLine("    public ValueTask ExecuteAsync(IConsole console)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (!currentModService.TryGetCurrentModServiceGetter(out var services))");
        sb.AppendLine("        {");
        sb.AppendLine("            console.WriteLine(\"No mod selected\");");
        sb.AppendLine("            return default;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine($"        var service = services.Get<I{name}Service>();");
        sb.AppendLine();
        sb.AppendLine($"        var model = service.Retrieve((int)Id);");
        sb.AppendLine();
        sb.AppendLine($"        console.Render(model, Id);");
        sb.AppendLine();
        sb.AppendLine("        return default;");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        var location = Path.Combine(GetSlnFolder(), "RanseiLink.Console", "ModelCommands", $"{name}Command.generated.cs");
        File.WriteAllText(location, sb.ToString(), Encoding.UTF8);
    }

    private static void GenerateService(XElement modelElement, XElement serviceElement)
    {
        var name = modelElement.Attribute("Name")!.Value;
        bool cultural = modelElement.Attribute("Cultural")?.Value == "true";
        var id = serviceElement.Attribute("Id")?.Value ?? modelElement.Attribute("Id")?.Value ?? (name + "Id");

        var serviceName = serviceElement.Attribute("Name")?.Value ?? name;
        var minId = serviceElement.Attribute("MinId")?.Value ?? "0";
        var maxId = serviceElement.Attribute("MaxId")!.Value;
        var defaultId = serviceElement.Attribute("DefaultId")?.Value;
        var romPath = serviceElement.Attribute("RomPath")?.Value ?? (serviceName + "RomPath");
        var idToName = serviceElement.Attribute("IdToName")?.Value != "false";

        var sb = new StringBuilder();
        sb.AppendLine("// This file is automatically generated");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using RanseiLink.Core.Enums;");
        sb.AppendLine("using RanseiLink.Core.Models;");
        sb.AppendLine();
        sb.AppendLine("namespace RanseiLink.Core.Services.ModelServices;");
        sb.AppendLine();
        sb.AppendLine();
        sb.AppendLine($"public partial interface I{serviceName}Service : IModelService<{name}> {{}}");
        sb.AppendLine();
        sb.AppendLine($"public partial class {serviceName}Service : BaseDataModelService<{name}>, I{serviceName}Service");
        sb.AppendLine("{");
        var culturalInsert1 = cultural? ", ConquestGameCode culture" : "";
        var culturalInsert2 = cultural ? "culture" : "";
        var culturalInsert3 = cultural ? ", culture" : "";
        var defaultInsert = defaultId != null ? $", {defaultId}" : "";
        sb.AppendLine($"    public static {serviceName}Service Load(string dataFile{culturalInsert1}) => new {serviceName}Service(dataFile{culturalInsert3});");
        sb.AppendLine($"    private {serviceName}Service(string dataFile{culturalInsert1}) : base(dataFile, {minId}, {maxId}, () => new {name}({culturalInsert2}){defaultInsert}) {{}}");
        sb.AppendLine();
        var culturalInsert = cultural ? ", mod.GameCode" : "";
        sb.AppendLine($"    public {serviceName}Service(ModInfo mod) : this(Path.Combine(mod.FolderPath, Constants.{romPath}){culturalInsert}) {{}}");
        sb.AppendLine();
        sb.AppendLine($"    public {name} Retrieve({id} id) => Retrieve((int)id);");
        sb.AppendLine();
        if (idToName)
        {
            bool hasName = false;
            foreach (var property in modelElement.Elements())
            {
                hasName = property.Name == "StringProperty" && property.Attribute("Name") != null;
                if (hasName)
                {
                    break;
                }
            }

            sb.AppendLine("    public override string IdToName(int id)");
            sb.AppendLine("    {");
            if (hasName)
            {
                sb.AppendLine("        return Retrieve(id).Name;");
            }
            else
            {
                sb.AppendLine($"        return (({id})id).ToString();");
            }
            sb.AppendLine("    }");
        }

        sb.AppendLine("}");

        var location = Path.Combine(GetSlnFolder(), "RanseiLink.Core", "Services", "ModelServices", $"{serviceName}Service.generated.cs");
        File.WriteAllText(location, sb.ToString(), Encoding.UTF8);
    }

    private static void GenerateModel(XElement modelElement)
    {
        var name = modelElement.Attribute("Name")!.Value;
        var dataLength = modelElement.Attribute("DataLength")!.Value;
        bool cultural = modelElement.Attribute("Cultural")?.Value == "true";
        var hasName = modelElement.Elements().Any(x => x.Name == "StringProperty" && x.Attribute("Name")?.Value == "Name");

        var sb = new StringBuilder();
        sb.AppendLine("// This file is automatically generated");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using RanseiLink.Core.Enums;");
        sb.AppendLine("using RanseiLink.Core.Graphics;");
        sb.AppendLine();
        sb.AppendLine("namespace RanseiLink.Core.Models;");
        sb.AppendLine();
        sb.Append($"public partial class {name} : BaseDataWindow");
        if (hasName)
        {
            sb.Append(", INamedModel");
        }
        sb.AppendLine();
        sb.AppendLine("{");
        if (hasName)
        {
            sb.AppendLine("    public event EventHandler? NameChanged;");
        }
        if (cultural)
        {
            sb.AppendLine("    private ConquestGameCode _culture;");
            var dataLengthParams = new CultureParams(modelElement, "DataLength", v => [v]);
            sb.AppendLine("    public static int DataLength(ConquestGameCode culture)");
            sb.AppendLine("    {");
            sb.AppendLine("        return culture switch");
            sb.AppendLine("        {");
            foreach (var i in dataLengthParams.Cultures)
            {
                sb.AppendLine(string.Format($"            ConquestGameCode.{i.Key} => {{0}},", i.Value));
            }
            sb.AppendLine(string.Format("            _ => {0}", dataLengthParams.DefaultParams));
            sb.AppendLine("        };");
            sb.AppendLine("    }");
            sb.AppendLine($"    public {name}(byte[] data, ConquestGameCode culture) : base(data, DataLength(culture)) {{ _culture = culture; }}");
            sb.AppendLine($"    public {name}(ConquestGameCode culture) : this(new byte[DataLength(culture)], culture) {{ }}");
        }
        else
        {
            sb.AppendLine($"    public const int DataLength = {dataLength};");
            sb.AppendLine($"    public {name}(byte[] data) : base(data, DataLength) {{ }}");
            sb.AppendLine($"    public {name}() : this(new byte[DataLength]) {{ }}");
        }

        void writeAccessor(Accessor accessor, string formatString, CultureParams cultureParams)
        {
            string @get;
            string @return;
            if (accessor == Accessor.Get)
            {
                @get = "get";
                @return = "return ";
            }
            else
            {
                @get = "set";
                @return = "";
            }

            var formattedDefault = string.Format(formatString, cultureParams.DefaultParams);
            if (cultural)
            {
                sb.AppendLine($"        {@get}");
                sb.AppendLine("        {");
                string condition = "if";
                foreach (var kvp in cultureParams.Cultures)
                {
                    var formattedCultural = string.Format(formatString, kvp.Value);
                    sb.AppendLine($"            {condition} (_culture == ConquestGameCode.{kvp.Key})");
                    sb.AppendLine("            {");
                    sb.AppendLine($"                {@return}{formattedCultural};");
                    sb.AppendLine("            }");



                    condition = "else if";
                }
                sb.AppendLine("            else");
                sb.AppendLine("            {");
                sb.AppendLine($"                {@return}{formattedDefault};");
                sb.AppendLine("            }");
                sb.AppendLine("        }");
            }
            else
            {
                sb.AppendLine($"        {@get} => {formattedDefault};");
            }
        }

        foreach (var propertyElement in modelElement.Elements())
        {
            if (propertyElement.Name == "Service")
            {
                continue;
            }
            var propName = propertyElement.Attribute("Name")?.Value;
            if (propertyElement.Name == "Property")
            {
                var propType = propertyElement.Attribute("Type")?.Value ?? "int";
                var index = new CultureParams(propertyElement, "Index", v => [v.Replace("  ", " ").Trim()]);

                sb.AppendLine();
                sb.AppendLine($"    public {propType} {propName}");
                sb.AppendLine("    {");
                if (propType == "bool")
                {
                    writeAccessor(Accessor.Get, "GetInt({0}) == 1", index);
                    writeAccessor(Accessor.Set, "SetInt({0}, value ? 1 : 0)", index);
                }
                else if (propType == "int")
                {
                    writeAccessor(Accessor.Get, "GetInt({0})", index);
                    writeAccessor(Accessor.Set, "SetInt({0}, value)", index);
                }
                else
                {
                    writeAccessor(Accessor.Get, $"({propType})GetInt({{0}})", index);
                    writeAccessor(Accessor.Set, "SetInt({0}, (int)value)", index);
                }
                sb.AppendLine("    }");
            }
            else if (propertyElement.Name == "ByteProperty")
            {
                var propType = propertyElement.Attribute("Type")?.Value ?? "int";
                var index = new CultureParams(propertyElement, "Index", v => [v.Replace("  ", " ").Trim()]);

                sb.AppendLine();
                sb.AppendLine($"    public {propType} {propName}");
                sb.AppendLine("    {");
                if (propType == "bool")
                {
                    writeAccessor(Accessor.Get, "GetByte({0}) == 1", index);
                    writeAccessor(Accessor.Set, "SetByte({0}, value ? 1 : 0)", index);
                }
                else if (propType == "int")
                {
                    writeAccessor(Accessor.Get, "GetByte({0})", index);
                    writeAccessor(Accessor.Set, "SetByte({0}, (byte)value)", index);
                }
                else
                {
                    writeAccessor(Accessor.Get, $"({propType})GetByte({{0}})", index);
                    writeAccessor(Accessor.Set, "SetByte({0}, (byte)value)", index);
                }
                sb.AppendLine("    }");
            }
            else if (propertyElement.Name == "FlagProperty")
            {
                var idType = propertyElement.Attribute("IdType")?.Value ?? "int";
                var index = propertyElement.Attribute("Index")!.Value.Replace("  ", " ").Trim();

                sb.AppendLine();
                if (idType != "int")
                {
                    sb.AppendLine($"    public bool Get{propName}({idType} id)");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        return Get{propName}((int)id);");
                    sb.AppendLine("    }");
                    sb.AppendLine();
                }
                sb.AppendLine($"    public bool Get{propName}(int id)");
                sb.AppendLine("    {");
                sb.AppendLine($"        return GetInt({index} + id, 1) == 1;");
                sb.AppendLine("    }");
                sb.AppendLine();

                if (idType != "int")
                {
                    sb.AppendLine($"    public void Set{propName}({idType} id, bool value)");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        Set{propName}((int)id, value);");
                    sb.AppendLine("    }");
                    sb.AppendLine();
                }
                sb.AppendLine($"    public void Set{propName}(int id, bool value)");
                sb.AppendLine("    {");
                sb.AppendLine($"        SetInt({index} + id, 1, value ? 1 : 0);");
                sb.AppendLine("    }");
            }
            else if (propertyElement.Name == "StringProperty")
            {
                var index = propertyElement.Attribute("Index")!.Value;
                var maxLength = new CultureParams(propertyElement, "MaxLength", v => [v]);
                sb.AppendLine();
                sb.AppendLine($"    public int {propName}_MaxLength");
                sb.AppendLine("    {");
                writeAccessor(Accessor.Get, "{0}", maxLength);
                sb.AppendLine("    }");
                sb.AppendLine($"    public string {propName}");
                sb.AppendLine("    {");
                sb.AppendLine($"        get => GetPaddedUtf8String({index}, {propName}_MaxLength);");
                sb.AppendLine($"        set");
                sb.AppendLine("        {");
                sb.AppendLine($"            SetPaddedUtf8String({index}, {propName}_MaxLength, value);");
                if (propName == "Name")
                {
                    sb.AppendLine($"            NameChanged?.Invoke(this, EventArgs.Empty);");
                }

                sb.AppendLine("        }");
                sb.AppendLine("    }");
            }
        }

        sb.Append("}");
        var location = Path.Combine(GetSlnFolder(), "RanseiLink.Core", "Models", $"{name}.generated.cs");
        File.WriteAllText(location, sb.ToString(), Encoding.UTF8);
    }

    private static void GenerateViewModel(XElement modelElement, Dictionary<string, string> idsWithModels)
    {
        var name = modelElement.Attribute("Name")!.Value;
        var id = modelElement.Attribute("Id")?.Value ?? (name + "Id");

        var sb = new StringBuilder();
        sb.AppendLine("// This file is automatically generated");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using RanseiLink.Core.Enums;");
        sb.AppendLine("using RanseiLink.Core.Graphics;");
        sb.AppendLine("using RanseiLink.Core.Models;");
        sb.AppendLine("using RanseiLink.Core.Services;");
        sb.AppendLine("using System.Collections.ObjectModel;");
        sb.AppendLine();
        sb.AppendLine("namespace RanseiLink.GuiCore.ViewModels;");
        sb.AppendLine();
        sb.AppendLine($"public partial class {name}ViewModel : ViewModelBase");
        sb.AppendLine("{");
        if (modelElement.Attribute("Cultural")?.Value == "true")
        {
            sb.AppendLine($"    private {name} _model = new(default);");
        }
        else
        {
            sb.AppendLine($"    private {name} _model = new();");
        }

        sb.AppendLine($"    private {id} _id;");
        sb.AppendLine($"    public int Id => (int)_id;");
        sb.AppendLine();

        var propTypes = new HashSet<string>();

        foreach (var propertyElement in modelElement.Elements())
        {
            if (propertyElement.Name == "Service")
            {
                continue;
            }
            var propName = propertyElement.Attribute("Name")!.Value;
            
            if (propertyElement.Name == "Property" || propertyElement.Name == "ByteProperty")
            {
                sb.AppendLine();
                var propType = propertyElement.Attribute("Type")?.Value ?? "int";
                propTypes.Add(propType);
                if (propType == "int")
                {
                    int? max = null;
                    var maxEl = propertyElement.Attribute("Max");
                    if (maxEl != null)
                    {
                        max = int.Parse(maxEl.Value);
                    }
                    else if (propertyElement.Name == "ByteProperty")
                    {
                        max = byte.MaxValue;
                    }
                    else
                    {
                        var indexEl = propertyElement.Attribute("Index");
                        if (indexEl != null)
                        {
                            var index = indexEl.Value.Replace("  ", " ").Trim();
                            var bitCount = int.Parse(index.Split(',')[^1].Trim());
                            max = ~(-1 << bitCount);
                        }
                    }
                    if (max != null)
                    {
                        sb.AppendLine($"    public int {propName}_Max => {max.Value};");
                    }

                    var minEl = propertyElement.Attribute("Min");
                    if (minEl != null)
                    {
                        sb.AppendLine($"    public int {propName}_Min => {int.Parse(minEl.Value)};");
                    }
                }
                if (idsWithModels.TryGetValue(propType, out var model))
                {
                    sb.AppendLine($"    public int {propName}");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        get => (int)_model.{propName};");
                    sb.AppendLine($"        set => SetProperty(_model.{propName}, ({propType})value, v => _model.{propName} = v);");
                    sb.AppendLine("    }");
                }
                else
                {
                    sb.AppendLine($"    public {propType} {propName}");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        get => _model.{propName};");
                    sb.AppendLine($"        set => SetProperty(_model.{propName}, value, v => _model.{propName} = v);");
                    sb.AppendLine("    }");
                }
            }
            else if (propertyElement.Name == "FlagProperty")
            {
                sb.AppendLine();
                sb.AppendLine($"    public ObservableCollection<CheckBoxViewModel> {propName}Items {{ get; }} = [];");
            }
            else if (propertyElement.Name == "StringProperty")
            {
                sb.AppendLine();
                var maxLenEl = propertyElement.Attribute("MaxLength");
                if (maxLenEl != null)
                {
                    sb.AppendLine($"    public int {propName}_MaxLength => _model.{propName}_MaxLength;");
                }
                sb.AppendLine($"    public string {propName}");
                sb.AppendLine("    {");
                sb.AppendLine($"        get => _model.{propName};");
                sb.AppendLine($"        set => SetProperty(_model.{propName}, value, v => _model.{propName} = v);");
                sb.AppendLine("    }");
            }
            else if (propertyElement.Name == "MsgProperty")
            {
                sb.AppendLine();
                var msgId = propertyElement.Attribute("Id")!.Value;
                sb.AppendLine($"    public string {propName}");
                sb.AppendLine("    {");
                sb.AppendLine($"        get => _msgService.GetMsgOfType(MsgShortcut.{msgId}, Id);");
                sb.AppendLine($"        set");
                sb.AppendLine("        {");
                sb.AppendLine($"            _msgService.SetMsgOfType(MsgShortcut.{msgId}, Id, value);");
                sb.AppendLine("            RaisePropertyChanged();");
                sb.AppendLine("        }");
                sb.AppendLine("    }");
                /*
                 public string Description
    {
        get => _msgService.GetMsgOfType(MsgShortcut.EpisodeDescription, Id);
        set => _msgService.SetMsgOfType(MsgShortcut.EpisodeDescription, Id, value);
    }*/
            }
        }

        foreach (var propType in propTypes)
        {
            if (idsWithModels.TryGetValue(propType, out var modelName))
            {
                sb.AppendLine();
                sb.AppendLine($"    public List<SelectorComboBoxItem> {modelName}Items {{ get; }}");
            }
        }

        sb.Append("}");
        var location = Path.Combine(GetSlnFolder(), "RanseiLink.GuiCore", "ViewModels", "ModelViewModels", $"{name}ViewModel.generated.cs");
        File.WriteAllText(location, sb.ToString(), Encoding.UTF8);
    }

    private static void GenerateConsoleRenderer(IEnumerable<XElement> models)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// This file is automatically generated");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using RanseiLink.Core.Enums;");
        sb.AppendLine("using RanseiLink.Core;");
        sb.AppendLine("using RanseiLink.Core.Models;");
        sb.AppendLine();
        sb.AppendLine("namespace RanseiLink.Console;");
        sb.AppendLine();

        sb.AppendLine("public static partial class RenderExtensions");
        sb.AppendLine("{");

        foreach (var modelElement in models)
        {
            if ((modelElement.Attribute("Render")?.Value) != "true")
            {
                continue;
            }

            var name = modelElement.Attribute("Name")!.Value;
            var id = modelElement.Attribute("Id")?.Value ?? (name + "Id");

            sb.AppendLine($"    public static void Render(this IConsole console, {name} model, object title)");
            sb.AppendLine("    {");
            sb.AppendLine($"        console.WriteTitle(title);");
            foreach (var propertyElement in modelElement.Elements())
            {
                var prop = propertyElement.Name.LocalName;
                if (prop == "Service")
                {
                    continue;
                }
                var propName = propertyElement.Attribute("Name")!.Value;
                if (prop == "Property" || prop == "ByteProperty" || prop == "StringProperty")
                {
                    
                    sb.AppendLine($"        console.WriteProperty(\"{propName}\", model.{propName});");
                }
                else if (prop == "FlagProperty")
                {
                    var idType = propertyElement.Attribute("IdType")?.Value ?? "int";
                    if (idType != "int")
                    {
                        sb.AppendLine($"        console.WriteProperty(\"{propName}\", \"\");");
                        sb.AppendLine($"        foreach (var i in EnumUtil.GetValuesExceptDefaults<{idType}>().Where(model.Get{propName}))");
                        sb.AppendLine("        {");
                        sb.AppendLine("            console.Output.WriteLine($\"      - {i}\");");
                        sb.AppendLine("        }");
                    }
                }
            }
            sb.AppendLine("    }");
        }

        sb.AppendLine("}");

        var location = Path.Combine(GetSlnFolder(), "RanseiLink.Console", "RenderExtensions", "ModelRenderExtensions.generated.cs");
        File.WriteAllText(location, sb.ToString(), Encoding.UTF8);
    }

    private static void GenerateModServiceContainer(IEnumerable<XElement> models)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// This file is automatically generated");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using RanseiLink.Core.Services.ModelServices;");
        sb.AppendLine();
        sb.AppendLine("namespace RanseiLink.Core.Services.Concrete;");
        sb.AppendLine();

        sb.AppendLine("public partial class ModServiceContainer");
        sb.AppendLine("{");

        var sbInterface = new StringBuilder();

        sbInterface.AppendLine("// This file is automatically generated");
        sbInterface.AppendLine();
        sbInterface.AppendLine("#nullable enable");
        sbInterface.AppendLine();
        sbInterface.AppendLine("using RanseiLink.Core.Services.ModelServices;");
        sbInterface.AppendLine();
        sbInterface.AppendLine("namespace RanseiLink.Core.Services;");
        sbInterface.AppendLine();

        sbInterface.AppendLine("public partial interface IModServiceContainer");
        sbInterface.AppendLine("{");

        foreach (var modelElement in models)
        {
            foreach (var serviceElement in modelElement.Elements("Service"))
            {
                var name = modelElement.Attribute("Name")!.Value;
                var serviceName = serviceElement.Attribute("Name")?.Value ?? name;
                var serviceInterfaceName = $"I{serviceName}Service";
                sb.AppendLine($"    private readonly Lazy<{serviceInterfaceName}> _{serviceName} = new(modServices.Get<{serviceInterfaceName}>);");
                sb.AppendLine($"    public {serviceInterfaceName} {serviceName} => _{serviceName}.Value;");
                sb.AppendLine();

                sbInterface.AppendLine($"    public {serviceInterfaceName} {serviceName} {{ get; }}");
            }
        }

        sb.AppendLine("}");
        sbInterface.AppendLine("}");

        var location = Path.Combine(GetSlnFolder(), "RanseiLink.Core", "Services", "Concrete", "ModServiceContainer.generated.cs");
        File.WriteAllText(location, sb.ToString(), Encoding.UTF8);

        var interfaceLocation = Path.Combine(GetSlnFolder(), "RanseiLink.Core", "Services", "IModServiceContainer.generated.cs");
        File.WriteAllText(interfaceLocation, sbInterface.ToString(), Encoding.UTF8);
    }

    /// <summary>
    /// Take the theme colors from Wpf and put them into XP. Makes it easier to keep the two in sync.
    /// </summary>
    private static void PortColorsToXP()
    {
        var wpfColorsFolder = Path.Combine(GetSlnFolder(), "RanseiLink.Windows", "Styles", "Colors");

        var wpfDark = XDocument.Load(Path.Combine(wpfColorsFolder, "Dark.xaml"));
        var wpfLight = XDocument.Load(Path.Combine(wpfColorsFolder, "Light.xaml"));

        var xpColorsFilePath = Path.Combine(GetSlnFolder(), "RanseiLink.XP", "Styles", "Colors", "Dark.axaml");
        var avaloniaNs = XNamespace.Get("https://github.com/avaloniaui");
        var wpfNs = XNamespace.Get("http://schemas.microsoft.com/winfx/2006/xaml/presentation");
        var xNs = XNamespace.Get("http://schemas.microsoft.com/winfx/2006/xaml");

        var dicts = new[] { ("Dark", wpfDark), ("Light", wpfLight) };

        var dictout = new List<XElement>();
        foreach (var dict in dicts)
        {
            var darkDict = new XElement(avaloniaNs + "ResourceDictionary",
               new XAttribute(xNs + "Key", dict.Item1)
               );
            dictout.Add(darkDict);
            foreach (var color in dict.Item2.Root!.Elements())
            {
                if (color.Name.LocalName.Contains("Color"))
                {
                    color.Name = avaloniaNs + color.Name.LocalName;
                    darkDict.Add(color);
                }
            }
        }
        var xpDoc = 
            new XDocument(
            new XElement(avaloniaNs + "ResourceDictionary",
               new XAttribute("xmlns", avaloniaNs.NamespaceName),
               new XAttribute(XNamespace.Xmlns + "x", xNs.NamespaceName),
                new XElement(avaloniaNs + "ResourceDictionary.ThemeDictionaries",
                dictout)
                ));

        xpDoc.Save(xpColorsFilePath);
    }
}