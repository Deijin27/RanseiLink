using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Xml.Linq;

namespace RanseiLink.Generation;

internal class Program
{
    static void Main(string[] args)
    {
        var doc = LoadResourceDoc("Models.xml");

        var models = doc.Element("Models")!.Elements("Model");

        Dictionary<string, string> idsWithModels = [];
        foreach (var modelElement in models)
        {
            if (modelElement.Elements().Any(x => x.Attribute("Name")?.Value == "Name"))
            {
                var name = modelElement.Attribute("Name")!.Value;
                var id = modelElement.Attribute("Id")?.Value ?? (name + "Id");
                idsWithModels[id] = name;
            }
        }
        idsWithModels["SpeakerId"] = "Speaker";

        foreach (var modelElement in models)
        {
            if (modelElement.Attribute("Model")?.Value == "true")
            {
                GenerateModel(modelElement);
            }

            if (modelElement.Attribute("ViewModel")?.Value == "true")
            {
                GenerateViewModel(modelElement, idsWithModels);
            }
        }
    }

    public class CultureParams
    {
        public CultureParams(XElement element, string attrName, Func<string, object[]> attrValueToParams)
        {
            var defaultAttr = element.Attribute(attrName) ?? throw new Exception($"Missing default attr of '{attrName}'");
            DefaultParams = attrValueToParams(defaultAttr.Value);

            var prefix = attrName + "_";
            foreach (var attr in element.Attributes())
            {
                if (attr.Name.LocalName.StartsWith(prefix))
                {
                    var culture = attr.Name.LocalName[prefix.Length..];
                    Cultures[culture] = attrValueToParams(attr.Value);
                }
            }
        }

        public object[] DefaultParams { get; }

        public Dictionary<string, object[]> Cultures { get; } = [];
    }

    public enum Accessor
    {
        Get,
        Set,
    }

    private static void GenerateModel(XElement modelElement)
    {
        var name = modelElement.Attribute("Name")!.Value;
        var dataLength = modelElement.Attribute("DataLength")!.Value;
        bool cultural = modelElement.Attribute("Cultural")?.Value == "true";

        var sb = new StringBuilder();
        sb.AppendLine("// This file is automatically generated");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using RanseiLink.Core.Enums;");
        sb.AppendLine("using RanseiLink.Core.Graphics;");
        sb.AppendLine();
        sb.AppendLine("namespace RanseiLink.Core.Models;");
        sb.AppendLine();
        sb.AppendLine($"public partial class {name} : BaseDataWindow");
        sb.AppendLine("{");
        if (cultural)
        {
            sb.AppendLine("    private ConquestGameCode _culture;");
            var dataLengthParams = new CultureParams(modelElement, "DataLength", v => [v]);
            sb.AppendLine("    public static int DataLength(ConquestGameCode culture)");
            sb.AppendLine("    {");
            sb.AppendLine("        return culture switch");
            sb.AppendLine("        {");
            foreach (var i in dataLengthParams.Cultures)
            {
                sb.AppendLine(string.Format($"            ConquestGameCode.{i.Key} => {{0}},", i.Value));
            }
            sb.AppendLine(string.Format("            _ => {0}", dataLengthParams.DefaultParams));
            sb.AppendLine("        };");
            sb.AppendLine("    }");
            sb.AppendLine($"    public {name}(byte[] data, ConquestGameCode culture) : base(data, DataLength(culture)) {{ _culture = culture; }}");
            sb.AppendLine($"    public {name}(ConquestGameCode culture) : this(new byte[DataLength(culture)], culture) {{ }}");
        }
        else
        {
            sb.AppendLine($"    public const int DataLength = {dataLength};");
            sb.AppendLine($"    public {name}(byte[] data) : base(data, DataLength) {{ }}");
            sb.AppendLine($"    public {name}() : this(new byte[DataLength]) {{ }}");
        }

        void writeAccessor(Accessor accessor, string formatString, CultureParams cultureParams)
        {
            string @get;
            string @return;
            if (accessor == Accessor.Get)
            {
                @get = "get";
                @return = "return ";
            }
            else
            {
                @get = "set";
                @return = "";
            }

            var formattedDefault = string.Format(formatString, cultureParams.DefaultParams);
            if (cultural)
            {
                sb.AppendLine($"        {@get}");
                sb.AppendLine("        {");
                string condition = "if";
                foreach (var kvp in cultureParams.Cultures)
                {
                    var formattedCultural = string.Format(formatString, kvp.Value);
                    sb.AppendLine($"            {condition} (_culture == ConquestGameCode.{kvp.Key})");
                    sb.AppendLine("            {");
                    sb.AppendLine($"                {@return}{formattedCultural};");
                    sb.AppendLine("            }");



                    condition = "else if";
                }
                sb.AppendLine("            else");
                sb.AppendLine("            {");
                sb.AppendLine($"                {@return}{formattedDefault};");
                sb.AppendLine("            }");
                sb.AppendLine("        }");
            }
            else
            {
                sb.AppendLine($"        {@get} => {formattedDefault};");
            }
        }

        foreach (var propertyElement in modelElement.Elements())
        {
            var propName = propertyElement.Attribute("Name")!.Value;
            if (propertyElement.Name == "Property")
            {
                var propType = propertyElement.Attribute("Type")?.Value ?? "int";
                var index = new CultureParams(propertyElement, "Index", v => [v.Replace("  ", " ").Trim()]);

                sb.AppendLine();
                sb.AppendLine($"    public {propType} {propName}");
                sb.AppendLine("    {");
                if (propType == "bool")
                {
                    writeAccessor(Accessor.Get, "GetInt({0}) == 1", index);
                    writeAccessor(Accessor.Set, "SetInt({0}, value ? 1 : 0)", index);
                }
                else if (propType == "int")
                {
                    writeAccessor(Accessor.Get, "GetInt({0})", index);
                    writeAccessor(Accessor.Set, "SetInt({0}, value)", index);
                }
                else
                {
                    writeAccessor(Accessor.Get, $"({propType})GetInt({{0}})", index);
                    writeAccessor(Accessor.Set, "SetInt({0}, (int)value)", index);
                }
                sb.AppendLine("    }");
            }
            else if (propertyElement.Name == "ByteProperty")
            {
                var propType = propertyElement.Attribute("Type")?.Value ?? "int";
                var index = new CultureParams(propertyElement, "Index", v => [v.Replace("  ", " ").Trim()]);

                sb.AppendLine();
                sb.AppendLine($"    public {propType} {propName}");
                sb.AppendLine("    {");
                if (propType == "bool")
                {
                    writeAccessor(Accessor.Get, "GetByte({0}) == 1", index);
                    writeAccessor(Accessor.Set, "SetByte({0}, value ? 1 : 0)", index);
                }
                else if (propType == "int")
                {
                    writeAccessor(Accessor.Get, "GetByte({0})", index);
                    writeAccessor(Accessor.Set, "SetByte({0}, (byte)value)", index);
                }
                else
                {
                    writeAccessor(Accessor.Get, $"({propType})GetByte({{0}})", index);
                    writeAccessor(Accessor.Set, "SetByte({0}, (byte)value)", index);
                }
                sb.AppendLine("    }");
            }
            else if (propertyElement.Name == "FlagProperty")
            {
                var idType = propertyElement.Attribute("IdType")?.Value ?? "int";
                var index = propertyElement.Attribute("Index")!.Value.Replace("  ", " ").Trim();

                sb.AppendLine();
                if (idType != "int")
                {
                    sb.AppendLine($"    public bool Get{propName}({idType} id)");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        return Get{propName}((int)id);");
                    sb.AppendLine("    }");
                    sb.AppendLine();
                }
                sb.AppendLine($"    public bool Get{propName}(int id)");
                sb.AppendLine("    {");
                sb.AppendLine($"        return GetInt({index} + id, 1) == 1;");
                sb.AppendLine("    }");
                sb.AppendLine();

                if (idType != "int")
                {
                    sb.AppendLine($"    public void Set{propName}({idType} id, bool value)");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        Set{propName}((int)id, value);");
                    sb.AppendLine("    }");
                    sb.AppendLine();
                }
                sb.AppendLine($"    public void Set{propName}(int id, bool value)");
                sb.AppendLine("    {");
                sb.AppendLine($"        SetInt({index} + id, 1, value ? 1 : 0);");
                sb.AppendLine("    }");
            }
            else if (propertyElement.Name == "StringProperty")
            {
                var index = propertyElement.Attribute("Index")!.Value;
                var maxLength = new CultureParams(propertyElement, "MaxLength", v => [v]);
                sb.AppendLine();
                sb.AppendLine($"    public string {propName}");
                sb.AppendLine("    {");
                writeAccessor(Accessor.Get, $"GetPaddedUtf8String({index}, {{0}})", maxLength);
                writeAccessor(Accessor.Set, $"SetPaddedUtf8String({index}, {{0}}, value)", maxLength);
                sb.AppendLine("    }");
            }
        }

        sb.Append("}");
        var location = Path.Combine(GetSlnFolder(), "RanseiLink.Core", "Models", $"{name}.generated.cs");
        File.WriteAllText(location, sb.ToString(), Encoding.UTF8);
    }

    private static void GenerateViewModel(XElement modelElement, Dictionary<string, string> idsWithModels)
    {
        var name = modelElement.Attribute("Name")!.Value;
        var id = modelElement.Attribute("Id")?.Value ?? (name + "Id");

        var sb = new StringBuilder();
        sb.AppendLine("// This file is automatically generated");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using RanseiLink.Core.Enums;");
        sb.AppendLine("using RanseiLink.Core.Graphics;");
        sb.AppendLine("using RanseiLink.Core.Models;");
        sb.AppendLine("using RanseiLink.Core.Services;");
        sb.AppendLine("using System.Collections.ObjectModel;");
        sb.AppendLine();
        sb.AppendLine("namespace RanseiLink.GuiCore.ViewModels;");
        sb.AppendLine();
        sb.AppendLine($"public partial class {name}ViewModel : ViewModelBase");
        sb.AppendLine("{");
        if (modelElement.Attribute("Cultural")?.Value == "true")
        {
            sb.AppendLine($"    private {name} _model = new(default);");
        }
        else
        {
            sb.AppendLine($"    private {name} _model = new();");
        }

        sb.AppendLine($"    private {id} _id;");
        sb.AppendLine($"    public int Id => (int)_id;");
        sb.AppendLine();

        var propTypes = new HashSet<string>();

        foreach (var propertyElement in modelElement.Elements())
        {
            var propName = propertyElement.Attribute("Name")!.Value;
            
            if (propertyElement.Name == "Property" || propertyElement.Name == "ByteProperty")
            {
                sb.AppendLine();
                var propType = propertyElement.Attribute("Type")?.Value ?? "int";
                propTypes.Add(propType);
                if (propType == "int")
                {
                    int? max = null;
                    var maxEl = propertyElement.Attribute("Max");
                    if (maxEl != null)
                    {
                        max = int.Parse(maxEl.Value);
                    }
                    else if (propertyElement.Name == "ByteProperty")
                    {
                        max = byte.MaxValue;
                    }
                    else
                    {
                        var indexEl = propertyElement.Attribute("Index");
                        if (indexEl != null)
                        {
                            var index = indexEl.Value.Replace("  ", " ").Trim();
                            var bitCount = int.Parse(index.Split(',')[^1].Trim());
                            max = ~(-1 << bitCount);
                        }
                    }
                    if (max != null)
                    {
                        sb.AppendLine($"    public int {propName}_Max => {max.Value};");
                    }

                    var minEl = propertyElement.Attribute("Min");
                    if (minEl != null)
                    {
                        sb.AppendLine($"    public int {propName}_Min => {int.Parse(minEl.Value)};");
                    }
                }
                if (idsWithModels.TryGetValue(propType, out var model))
                {
                    sb.AppendLine($"    public int {propName}");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        get => (int)_model.{propName};");
                    sb.AppendLine($"        set => SetProperty(_model.{propName}, ({propType})value, v => _model.{propName} = v);");
                    sb.AppendLine("    }");
                }
                else
                {
                    sb.AppendLine($"    public {propType} {propName}");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        get => _model.{propName};");
                    sb.AppendLine($"        set => SetProperty(_model.{propName}, value, v => _model.{propName} = v);");
                    sb.AppendLine("    }");
                }
            }
            else if (propertyElement.Name == "FlagProperty")
            {
                sb.AppendLine();
                sb.AppendLine($"    public ObservableCollection<CheckBoxViewModel> {propName}Items {{ get; }} = [];");
            }
            else if (propertyElement.Name == "StringProperty")
            {
                sb.AppendLine();
                var maxLenEl = propertyElement.Attribute("MaxLength");
                if (maxLenEl != null)
                {
                    sb.AppendLine($"    public int {propName}_MaxLength => {maxLenEl.Value};");
                }
                sb.AppendLine($"    public string {propName}");
                sb.AppendLine("    {");
                sb.AppendLine($"        get => _model.{propName};");
                sb.AppendLine($"        set => SetProperty(_model.{propName}, value, v => _model.{propName} = v);");
                sb.AppendLine("    }");
            }
            else if (propertyElement.Name == "MsgProperty")
            {
                sb.AppendLine();
                var msgId = propertyElement.Attribute("Id")!.Value;
                sb.AppendLine($"    public string {propName}");
                sb.AppendLine("    {");
                sb.AppendLine($"        get => _msgService.GetMsgOfType(MsgShortcut.{msgId}, Id);");
                sb.AppendLine($"        set => _msgService.SetMsgOfType(MsgShortcut.{msgId}, Id, value);");
                sb.AppendLine("    }");
                /*
                 public string Description
    {
        get => _msgService.GetMsgOfType(MsgShortcut.EpisodeDescription, Id);
        set => _msgService.SetMsgOfType(MsgShortcut.EpisodeDescription, Id, value);
    }*/
            }
        }

        foreach (var propType in propTypes)
        {
            if (idsWithModels.TryGetValue(propType, out var modelName))
            {
                sb.AppendLine();
                sb.AppendLine($"    public List<SelectorComboBoxItem> {modelName}Items {{ get; }}");
            }
        }

        sb.Append("}");
        var location = Path.Combine(GetSlnFolder(), "RanseiLink.GuiCore", "ViewModels", "ModelViewModels", $"{name}ViewModel.generated.cs");
        File.WriteAllText(location, sb.ToString(), Encoding.UTF8);
    }

    private static string GetSlnFolder()
    {
        var sourceFilePath = GetSourceFilePathName();
        var slnFolder = Path.GetDirectoryName(Path.GetDirectoryName(sourceFilePath))!;
        return slnFolder;
    }

    private static XDocument LoadResourceDoc(string fileName)
    {
        var path = $"RanseiLink.Generation.{fileName}";
        XDocument doc;
        using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(path)!)
        {
            doc = XDocument.Load(stream);
        }
        return doc;
    }

    private static string GetSourceFilePathName([CallerFilePath] string? callerFilePath = null)
    {
        return callerFilePath ?? throw new Exception("Failed to get caller file path");
    }
}