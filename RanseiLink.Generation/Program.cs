using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Xml.Linq;

namespace RanseiLink.Generation;

internal class Program
{
    static void Main(string[] args)
    {
        var doc = LoadResourceDoc("Models.xml");

        foreach (var modelElement in doc.Element("Models")!.Elements("Model"))
        {
            var name = modelElement.Attribute("Name")!.Value;
            var dataLength = modelElement.Attribute("DataLength")?.Value;

            var sb = new StringBuilder();
            sb.AppendLine("// This file is automatically generated");
            sb.AppendLine();
            sb.AppendLine("using RanseiLink.Core.Enums;");
            sb.AppendLine("using RanseiLink.Core.Graphics;");
            sb.AppendLine();
            sb.AppendLine("namespace RanseiLink.Core.Models;");
            sb.AppendLine();
            sb.AppendLine($"public partial class {name} : BaseDataWindow");
            sb.AppendLine("{");
            sb.AppendLine($"    public const int DataLength = {dataLength};");
            sb.AppendLine($"    public {name}(byte[] data) : base(data, DataLength) {{ }}");
            sb.AppendLine($"    public {name}() : this(new byte[DataLength]) {{ }}");

            foreach (var propertyElement in modelElement.Elements())
            {
                var propName = propertyElement.Attribute("Name")!.Value;
                sb.AppendLine();
                if (propertyElement.Name == "Property")
                {
                    var propType = propertyElement.Attribute("Type")?.Value ?? "int";
                    var index = propertyElement.Attribute("Index")!.Value.Replace("  ", " ");
                    string castForward = "";
                    string castBack = "";
                    if (propType != "int")
                    {
                        castForward = $"({propType})";
                        castBack = $"(int)";
                    }
                    sb.AppendLine($"    public {propType} {propName}");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        get => {castForward}GetInt({index});");
                    sb.AppendLine($"        set => SetInt({index}, {castBack}value);");
                    sb.AppendLine("    }");
                }
                else if (propertyElement.Name == "StringProperty")
                {
                    var index = propertyElement.Attribute("Index")!.Value;
                    var maxLength = propertyElement.Attribute("MaxLength")!.Value;
                    sb.AppendLine($"    public string {propName}");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        get => GetPaddedUtf8String({index}, {maxLength});");
                    sb.AppendLine($"        set => SetPaddedUtf8String({index}, {maxLength}, value);");
                    sb.AppendLine("    }");
                }
            }

            sb.Append("}");

            var sourceFilePath = GetSourceFilePathName();
            var slnFolder = Path.GetDirectoryName(Path.GetDirectoryName(sourceFilePath))!;
            var location = Path.Combine(slnFolder, "RanseiLink.Core", "Models", $"{name}.generated.cs");
            File.WriteAllText(location, sb.ToString(), Encoding.UTF8);
        }
    }

    private static XDocument LoadResourceDoc(string fileName)
    {
        var path = $"RanseiLink.Generation.{fileName}";
        XDocument doc;
        using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(path)!)
        {
            doc = XDocument.Load(stream);
        }
        return doc;
    }

    private static string GetSourceFilePathName([CallerFilePath] string? callerFilePath = null)
    {
        return callerFilePath ?? throw new Exception("Failed to get caller file path");
    }
}