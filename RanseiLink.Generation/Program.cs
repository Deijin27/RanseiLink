using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Xml.Linq;

namespace RanseiLink.Generation;

internal class Program
{
    static void Main(string[] args)
    {
        var doc = LoadResourceDoc("Models.xml");

        var models = doc.Element("Models")!.Elements("Model");

        Dictionary<string, string> idsWithModels = [];
        foreach (var modelElement in models)
        {
            if (modelElement.Elements().Any(x => x.Attribute("Name")?.Value == "Name") || modelElement.Attribute("Name")!.Value == "Episode")
            {
                var name = modelElement.Attribute("Name")!.Value;
                idsWithModels[name + "Id"] = name;
            }
        }

        foreach (var modelElement in models)
        {
            GenerateModel(modelElement);
            if (modelElement.Attribute("ViewModel")?.Value == "true")
            {
                GenerateViewModel(modelElement, idsWithModels);
            }
        }
    }

    private static void GenerateModel(XElement modelElement)
    {
        var name = modelElement.Attribute("Name")!.Value;
        var dataLength = modelElement.Attribute("DataLength")?.Value;

        var sb = new StringBuilder();
        sb.AppendLine("// This file is automatically generated");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using RanseiLink.Core.Enums;");
        sb.AppendLine("using RanseiLink.Core.Graphics;");
        sb.AppendLine();
        sb.AppendLine("namespace RanseiLink.Core.Models;");
        sb.AppendLine();
        sb.AppendLine($"public partial class {name} : BaseDataWindow");
        sb.AppendLine("{");
        sb.AppendLine($"    public const int DataLength = {dataLength};");
        sb.AppendLine($"    public {name}(byte[] data) : base(data, DataLength) {{ }}");
        sb.AppendLine($"    public {name}() : this(new byte[DataLength]) {{ }}");

        foreach (var propertyElement in modelElement.Elements())
        {
            var propName = propertyElement.Attribute("Name")!.Value;
            sb.AppendLine();
            if (propertyElement.Name == "Property")
            {
                var propType = propertyElement.Attribute("Type")?.Value ?? "int";
                var index = propertyElement.Attribute("Index")!.Value.Replace("  ", " ").Trim();

                sb.AppendLine($"    public {propType} {propName}");
                sb.AppendLine("    {");
                if (propType == "bool")
                {
                    sb.AppendLine($"        get => GetInt({index}) == 1;");
                    sb.AppendLine($"        set => SetInt({index}, value ? 1 : 0);");
                }
                else if (propType == "int")
                {
                    sb.AppendLine($"        get => GetInt({index});");
                    sb.AppendLine($"        set => SetInt({index}, value);");
                }
                else
                {
                    sb.AppendLine($"        get => ({propType})GetInt({index});");
                    sb.AppendLine($"        set => SetInt({index}, (int)value);");
                }
                sb.AppendLine("    }");
            }
            else if (propertyElement.Name == "FlagProperty")
            {
                var idType = propertyElement.Attribute("IdType")?.Value ?? "int";
                var index = propertyElement.Attribute("Index")!.Value.Replace("  ", " ").Trim();

                if (idType != "int")
                {
                    sb.AppendLine($"    public bool Get{propName}({idType} id)");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        return Get{propName}((int)id);");
                    sb.AppendLine("    }");
                    sb.AppendLine();
                }
                sb.AppendLine($"    public bool Get{propName}(int id)");
                sb.AppendLine("    {");
                sb.AppendLine($"        return GetInt({index} + id, 1) == 1;");
                sb.AppendLine("    }");
                sb.AppendLine();

                if (idType != "int")
                {
                    sb.AppendLine($"    public void Set{propName}({idType} id, bool value)");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        Set{propName}((int)id, value);");
                    sb.AppendLine("    }");
                    sb.AppendLine();
                }
                sb.AppendLine($"    public void Set{propName}(int id, bool value)");
                sb.AppendLine("    {");
                sb.AppendLine($"        SetInt({index} + id, 1, value ? 1 : 0);");
                sb.AppendLine("    }");
            }
            else if (propertyElement.Name == "StringProperty")
            {
                var index = propertyElement.Attribute("Index")!.Value;
                var maxLength = propertyElement.Attribute("MaxLength")!.Value;
                sb.AppendLine($"    public string {propName}");
                sb.AppendLine("    {");
                sb.AppendLine($"        get => GetPaddedUtf8String({index}, {maxLength});");
                sb.AppendLine($"        set => SetPaddedUtf8String({index}, {maxLength}, value);");
                sb.AppendLine("    }");
            }
        }

        sb.Append("}");
        var location = Path.Combine(GetSlnFolder(), "RanseiLink.Core", "Models", $"{name}.generated.cs");
        File.WriteAllText(location, sb.ToString(), Encoding.UTF8);
    }

    private static void GenerateViewModel(XElement modelElement, Dictionary<string, string> idsWithModels)
    {
        var name = modelElement.Attribute("Name")!.Value;

        var sb = new StringBuilder();
        sb.AppendLine("// This file is automatically generated");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using RanseiLink.Core.Enums;");
        sb.AppendLine("using RanseiLink.Core.Graphics;");
        sb.AppendLine();
        sb.AppendLine("namespace RanseiLink.GuiCore.ViewModels;");
        sb.AppendLine();
        sb.AppendLine($"public partial class {name}ViewModel : ViewModelBase");
        sb.AppendLine("{");

        bool first = true;
        foreach (var propertyElement in modelElement.Elements())
        {
            var propName = propertyElement.Attribute("Name")!.Value;
            if (!first)
            {
                sb.AppendLine();
            }
            first = false;

            if (propertyElement.Name == "Property")
            {
                var propType = propertyElement.Attribute("Type")?.Value ?? "int";
                if (idsWithModels.TryGetValue(propType, out var model))
                {
                    sb.AppendLine($"    public int {propName}");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        get => (int)_model.{propName};");
                    sb.AppendLine($"        set => SetProperty(_model.{propName}, ({propType})value, v => _model.{propName} = v);");
                    sb.AppendLine("    }");
                }
                else
                {
                    sb.AppendLine($"    public {propType} {propName}");
                    sb.AppendLine("    {");
                    sb.AppendLine($"        get => _model.{propName};");
                    sb.AppendLine($"        set => SetProperty(_model.{propName}, value, v => _model.{propName} = v);");
                    sb.AppendLine("    }");
                }
            }
            else if (propertyElement.Name == "FlagProperty")
            {
            }
            else if (propertyElement.Name == "StringProperty")
            {
                sb.AppendLine($"    public string {propName}");
                sb.AppendLine("    {");
                sb.AppendLine($"        get => _model.{propName};");
                sb.AppendLine($"        set => SetProperty(_model.{propName}, value, v => _model.{propName} = v);");
                sb.AppendLine("    }");
            }
        }

        sb.Append("}");
        var location = Path.Combine(GetSlnFolder(), "RanseiLink.GuiCore", "ViewModels", "ModelViewModels", $"{name}ViewModel.generated.cs");
        File.WriteAllText(location, sb.ToString(), Encoding.UTF8);
    }

    private static string GetSlnFolder()
    {
        var sourceFilePath = GetSourceFilePathName();
        var slnFolder = Path.GetDirectoryName(Path.GetDirectoryName(sourceFilePath))!;
        return slnFolder;
    }

    private static XDocument LoadResourceDoc(string fileName)
    {
        var path = $"RanseiLink.Generation.{fileName}";
        XDocument doc;
        using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(path)!)
        {
            doc = XDocument.Load(stream);
        }
        return doc;
    }

    private static string GetSourceFilePathName([CallerFilePath] string? callerFilePath = null)
    {
        return callerFilePath ?? throw new Exception("Failed to get caller file path");
    }
}