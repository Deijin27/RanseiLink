using System.IO;

namespace RanseiLink.Core.Graphics;

/// <summary>
/// Texture data. The one chunk of <see cref="BTX0"/>.
/// </summary>
public class TEX0
{
    public struct Header
    {
        public const string MagicNumber = "TEX0";
        public uint TotalLength;

        public uint Padding1;

        public int TextureDataLength;
        public ushort TextureInfoOffset;
        public uint TextureDataOffset;

        public int TextureCompressedDataLength;
        public ushort TextureCompressedInfoOffset;
        public uint TextureCompressedDataOffset;
        public uint TextureCompressedInfoDataOffset;

        public uint PaletteDataLength;
        public uint PaletteInfoOffset;
        public uint PaletteDataOffset;

        public Header(BinaryReader br)
        {
            var magicNumber = br.ReadMagicNumber();
            if (magicNumber != MagicNumber)
            {
                throw new InvalidDataException($"Unexpected magic number '{magicNumber}'. (expected: {MagicNumber})");
            }
            TotalLength = br.ReadUInt32();

            Padding1 = br.ReadUInt32();

            TextureDataLength = br.ReadUInt16() << 3;
            TextureInfoOffset = br.ReadUInt16();
            var padding = br.ReadUInt32();
            TextureDataOffset = br.ReadUInt32();
            padding +=  br.ReadUInt32();

            TextureCompressedDataLength = br.ReadUInt16() << 3;
            TextureCompressedInfoOffset = br.ReadUInt16();
            padding += br.ReadUInt32();
            TextureCompressedDataOffset = br.ReadUInt32();
            TextureCompressedInfoDataOffset = br.ReadUInt32();

            padding += br.ReadUInt32();


            PaletteDataLength = br.ReadUInt32() << 3;
            PaletteInfoOffset = br.ReadUInt32();
            PaletteDataOffset = br.ReadUInt32();


            if (padding != 0)
            {
                throw new InvalidDataException("In texture what was expected to be padding was not 0");
            }
        }
    }

    public struct TextureInfo
    {

    }

    private static readonly byte[] _constantData = new byte[]
    { 
        0x54, 0x45, 0x58, 0x30, 0x6C, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 
        0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x33, 0x00, 0x00, 0x2C, 0x33, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xEC, 0x02, 0x00, 0x00, 0x2C, 0x33, 0x00, 0x00, 0x00, 0x18, 0xB0, 
        0x02, 0x08, 0x00, 0x6C, 0x00, 0x7F, 0x01, 0x00, 0x00, 0x55, 0x00, 0x02, 0x00, 0x53, 0x03, 0x16, 0x08, 0x52, 0x04, 0x0F, 0x04, 
        0x51, 0x05, 0x0A, 0x02, 0x50, 0x06, 0x08, 0x01, 0x49, 0x07, 0x06, 0x14, 0x48, 0x01, 0x07, 0x0A, 0x49, 0x09, 0x08, 0x15, 0x48, 
        0x05, 0x09, 0x0B, 0x50, 0x0B, 0x0D, 0x03, 0x49, 0x0C, 0x0B, 0x16, 0x48, 0x04, 0x0C, 0x0C, 0x49, 0x0E, 0x0D, 0x17, 0x48, 0x0A, 
        0x0E, 0x0D, 0x51, 0x10, 0x13, 0x06, 0x50, 0x11, 0x12, 0x05, 0x48, 0x03, 0x11, 0x0E, 0x48, 0x10, 0x12, 0x0F, 0x50, 0x14, 0x15, 
        0x07, 0x48, 0x0F, 0x14, 0x10, 0x48, 0x13, 0x15, 0x11, 0x50, 0x17, 0x18, 0x09, 0x48, 0x02, 0x17, 0x12, 0x48, 0x16, 0x18, 0x13, 
        0x08, 0x00, 0xC4, 0x00, 0x00, 0x00, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0x40, 0x00, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0x80, 
        0x00, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0xC0, 0x00, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0x00, 0x01, 0x20, 0x2D, 0x20, 0x00, 
        0x01, 0x80, 0x40, 0x01, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0x80, 0x01, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0xC0, 0x01, 0x20, 
        0x2D, 0x20, 0x00, 0x01, 0x80, 0x00, 0x02, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0x40, 0x02, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 
        0x80, 0x02, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0xC0, 0x02, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0x00, 0x03, 0x20, 0x2D, 0x20, 
        0x00, 0x01, 0x80, 0x40, 0x03, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0x80, 0x03, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0xC0, 0x03, 
        0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0x00, 0x04, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0x40, 0x04, 0x20, 0x2D, 0x20, 0x00, 0x01, 
        0x80, 0x80, 0x04, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0xC0, 0x04, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0x00, 0x05, 0x20, 0x2D, 
        0x20, 0x00, 0x01, 0x80, 0x40, 0x05, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0x80, 0x05, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0xC0, 
        0x05, 0x20, 0x2D, 0x20, 0x00, 0x01, 0x80, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x30, 0x30, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 
        0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x30, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 
        0x5F, 0x30, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x30, 0x34, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x30, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 
        0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x30, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 
        0x78, 0x5F, 0x30, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x30, 0x38, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 
        0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x31, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 
        0x69, 0x78, 0x5F, 0x31, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x31, 0x32, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x31, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x31, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 
        0x66, 0x69, 0x78, 0x5F, 0x31, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x31, 
        0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x31, 0x37, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x31, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 
        0x5F, 0x66, 0x69, 0x78, 0x5F, 0x31, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 
        0x32, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x32, 0x31, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 
        0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x32, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x08, 0x00, 0x14, 0x00, 
        0x7F, 0x01, 0x00, 0x00, 0x66, 0x00, 0x02, 0x00, 0x4A, 0x02, 0x01, 0x01, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
        0x00, 0x00, 0x00, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x66, 0x5F, 0x70, 0x6C, 0x00, 0x00, 0x00, 0x62, 0x61, 
        0x73, 0x65, 0x5F, 0x66, 0x69, 0x78, 0x5F, 0x62, 0x5F, 0x70, 0x6C, 0x00, 0x00, 0x00 
    };

    public TEX0(BinaryReader br)
    {
        br.BaseStream.Seek(_constantData.Length, SeekOrigin.Current);
        PixelMap = RawChar.Decompress(br.ReadBytes(0x3000));
        Palette1 = RawPalette.Decompress(br.ReadBytes(0x20));
        Palette2 = RawPalette.Decompress(br.ReadBytes(0x20));
    }

    public byte[] PixelMap { get; set; }
    public Rgb15[] Palette1 { get; set; }
    public Rgb15[] Palette2 { get; set; }

   
    public void WriteTo(BinaryWriter bw)
    {
        bw.Write(_constantData);
        bw.Write(RawChar.Compress(PixelMap));
        bw.Write(RawPalette.Compress(Palette1));
        bw.Write(RawPalette.Compress(Palette2));
    }
}
